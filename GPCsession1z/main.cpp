#include <Windows.h>
#include <iostream>
#include "Input.h"
#include "Events.h"

#define rows 30
#define cols 30
#define fx 8	//Font x
#define fy 16	//Font y

int main() {
	void* consoleHandle = GetStdHandle(STD_OUTPUT_HANDLE);

	char map[rows][cols] = {
		{ '_','$','$','$','$','$','$','$','$','$','$','$','$','$','$','$','$','$','$','$','$','$','$','$','$','$','$','$','$','$' },
		{ '$','$','$','$','$','$','$','$','$','$','$','$','$','$','$','$','$','$','$','$','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' },
		{ '_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_','_' }
	};

	char playerCharacter = 'O';
	short playerX = cols / 2;
	short playerY = rows / 2;

	//Font Code
	//CONSOLE_FONT_INFO fontInfo;
	//GetCurrentConsoleFont(consoleHandle, false, &fontInfo);
	//printf("%i %i\n", fontInfo.dwFontSize.X, fontInfo.dwFontSize.Y);
	//GetConsoleFontSize(consoleHandle, )

	while (true) {
		if (isEvent(Events::Escape)) {
			break;
		}

		//Left
		if (isEvent(Events::A)) {
			playerX--;
		}

		//Right
		else if (isEvent(Events::D)) {
			playerX++;
		}

		//Up
		if (isEvent(Events::W)) {
			playerY--;
		}

		//Down
		else if (isEvent(Events::S)) {
			playerY++;
		}

		//Mouse Code
		POINT cursorPos;
		GetCursorPos(&cursorPos);
		ScreenToClient(GetConsoleWindow(), &cursorPos);
		short mx = 0, my = 0;
		mx = cursorPos.x / fx;
		my = cursorPos.y / fy;

		map[my][mx] = '_';
		//printf("x: %i, y: %i\n", cursorPos.x, cursorPos.y);

		//Rendering Code
		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				printf("%c", map[i][j]);
			}
			printf("\n");
		}

		


		SetConsoleCursorPosition(consoleHandle, { playerX, playerY });
		printf("%c", playerCharacter);

		SetConsoleCursorPosition(consoleHandle, { 0, 0 });

		Sleep(20);
	}
	
	system("PAUSE");
	return 0;
}